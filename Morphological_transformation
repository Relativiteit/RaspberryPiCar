import cv2
import numpy as np
import time as tp

capturetimes = []
starttime = tp.time()
procestimes = []
erosiontimes = []
dilationtimes = []
openingtimes = []
closingtimes = []



def getAverage(alist):
    duration = 0
    for i in alist:
        duration = duration + i

    duration = duration / len(alist)
    return duration

# Number gives 1 if you use a webcam 0 if it is built in.
cap = cv2.VideoCapture(0)

while True:
    startcapturetime = tp.time()
    _, frame = cap.read()
    capturetimes.append(tp.time() - startcapturetime)
    startprocestime = tp.time()

    # Hue saturation value, different way to represent colours.
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Defining upper and lower yellow, first digit determines hue,
    # to have a different colour use a different range for upper and lower.
    lower_yellow = np.array([10, 100, 100])
    upper_yellow = np.array([60, 255, 255])

    mask = cv2.inRange(hsv, lower_yellow, upper_yellow)
    res = cv2.bitwise_and(frame, frame, mask=mask)

    kernel = np.ones((5, 5), np.uint8)

    s1 = tp.time()
    erosion = cv2.erode(mask, kernel, iterations=1)
    erosiontimes.append(tp.time() - s1)

    s1 = tp.time()
    dilation = cv2.dilate(mask, kernel, iterations=1)
    # Removing false positives or false negatives
    # Remove false positives
    dilationtimes.append(tp.time() - s1)

    s1 = tp.time()
    opening = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)
    openingtimes.append(tp.time() - s1)

    s1 = tp.time()
    closing = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)
    closingtimes.append(tp.time() - s1)

    procestimes.append(tp.time() - startprocestime)

    #cv2.imshow('frame', frame)

    cv2.imshow('res', res )
    cv2.imshow('eriosion', erosion )
    cv2.imshow('dilation', dilation )

    cv2.imshow('opening', opening)
    cv2.imshow('closing', closing)

    if cv2.waitKey(5) != -1:
        break

cv2.destroyAllWindows()
# Release webcam or it cannot be used in other applications

cap.release()

#total time of script
endtime = tp.time()
duration = endtime - starttime

#this is for the list avarages of the capturetime

# duration = total time, getaverage(ct) = avarage to catch an image, getaverage(pt) = averagetime to process a image
print(duration, ",", getAverage(capturetimes), ",", getAverage(procestimes), ",", getAverage(dilationtimes), ",", getAverage(erosiontimes), ",", getAverage(openingtimes), ",", getAverage(closingtimes))
